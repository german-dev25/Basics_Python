# 3) Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр,
# соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное
# (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки
# должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение
# количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
# количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n
# равно переданному аргументу. Если ячеек на формирование ряда не хватает,
# то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.


class OrganicCell:
    def __init__(self, cells):
        self.cells = int(cells)

    def __str__(self):
        return self.cells * "*"

    def __add__(self, other):
        return OrganicCell(self.cells + other.cells)

    def __sub__(self, other):
        if (self.cells - other.cells) > 0:
            return OrganicCell(self.cells - other.cells)
        else:
            return 'Отрицательный результат'

    def __mul__(self, other):
        return OrganicCell(self.cells * other.cells)

    def __floordiv__(self, other):
        return OrganicCell(self.cells // other.cells)

    def make_order(self, cells_in_row):
        order = ''
        for cell in range(self.cells // cells_in_row):
            order += '{}\\n'.format('*' * cells_in_row)
            # order += '{}\n'.format('*' * cells_in_row)
        order += '{}'.format('*' * (self.cells % cells_in_row))
        return print(order)


cell_1 = OrganicCell(2)
cell_2 = OrganicCell(11)

print(cell_1)
print(cell_2)
print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_2 - cell_1)
print(cell_1 * cell_2)
print(cell_1 // cell_2)

cell_1.make_order(1)
cell_2.make_order(3)
